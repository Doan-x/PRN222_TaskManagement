@model IEnumerable<PRN222_TaskManagement.Models.Task>

@{
    ViewData["Title"] = "Task List";
}

<h1 class="mb-4">Task List</h1>

<p>
    <a asp-action="Create" class="btn btn-primary mb-3">Create New Task</a>
</p>

<div class="row">
    <div class="col">
        <form method="get" class="d-flex gap-2 mb-3">
            <!-- Filter by Status -->
            <select name="status" class="form-select" style="width: 200px;">
                <option value="pending" selected="@(ViewBag.Status == "pending" ? "selected" : null)">Pending</option>
                <option value="in_progress" selected="@(ViewBag.Status == "in_progress" ? "selected" : null)">In Progress</option>
                <option value="completed" selected="@(ViewBag.Status == "completed" ? "selected" : null)">Completed</option>
                <option value="all" selected="@(string.IsNullOrEmpty(ViewBag.Status) ? "selected" : null)">All</option>
            </select>

            <!-- Filter by Priority -->
            <select name="priority" class="form-select" style="width: 200px;">
                <option value="">All Priorities</option>
                <option value="low" selected="@(ViewBag.Priority == "low" ? "selected" : null)">Low</option>
                <option value="medium" selected="@(ViewBag.Priority == "medium" ? "selected" : null)">Medium</option>
                <option value="high" selected="@(ViewBag.Priority == "high" ? "selected" : null)">High</option>
            </select>

            <!-- Sort by Due Date -->
            <select name="sortOrder" class="form-select" style="width: 200px;">
                <option value="asc" selected="@(ViewBag.SortOrder == "asc" ? "selected" : null)">Due Date (Earliest First)</option>
                <option value="desc" selected="@(ViewBag.SortOrder == "desc" ? "selected" : null)">Due Date (Latest First)</option>
            </select>

            <button type="submit" class="btn btn-primary">Filter</button>
        </form>
    </div>
</div>

<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-md-3">
            <div class="card mb-3 shadow-sm position-relative">
                <div class="card-header text-white @(item.Status == "pending" ? "bg-danger" : item.Status == "in_progress" ? "bg-warning" : "bg-success")">
                    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" data-bs-toggle="modal" data-bs-target="#deleteModal" data-task-id="@item.TaskId"></button>
                    <h5 class="card-title">@item.Title</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@item.Description</p>                 
                    <p><strong>Due Date:</strong> @item.DueDate</p>
                    <p><strong>Completed At:</strong> @(item.CompletedAt?.ToString("yyyy/MM/dd"+ " - "+"HH:mm:ss") ?? "Not Completed")</p>
                    <p>
                        <strong>Priority:</strong>
                        <span class="badge text-bg-@GetPriorityClass(item.Priority)">
                            @item.Priority
                        </span>
                       
                    </p>
                    <p><strong>Created At:</strong> @(item.CreatedAt?.ToString("yyyy/MM/dd" + " - " + "HH:mm:ss"))</p>
                    <p class="d-flex align-items-center">
                        <strong class="me-2">Status:</strong>
                        <select class="form-select status-dropdown" data-task-id="@item.TaskId"
                        @(item.Status == "completed" ? "disabled" : "")>
                            
                            <option value="pending" selected="@(item.Status == "pending" ? "selected" : null)">Pending</option>
                            <option value="in_progress" selected="@(item.Status == "in_progress" ? "selected" : null)">In Progress</option>
                            <option value="completed" selected="@(item.Status == "completed" ? "selected" : null)">Completed</option>
                        </select>
                    </p>
                    <div class="d-flex justify-content-end">
                        <a asp-action="Edit" asp-route-id="@item.TaskId" class="btn btn-outline-dark">Edit</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a id="confirmDelete" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="position-fixed" style="top: 10%; right: 1rem; z-index: 1050; width: 350px;">
        <div id="successToast" class="toast show align-items-center text-bg-success border-0 shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body fw-bold fs-5" id="toast-content">
                    ✅ @TempData["Success"]
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
}
<div id="notification" class="position-fixed" style="top: 10%; right: 1rem; z-index: 1050; width: 350px;">

</div>
<script>
    document.querySelectorAll('.status-dropdown').forEach(dropdown => {
        dropdown.addEventListener('change', function() {
            let taskId = this.getAttribute('data-task-id');
            let newStatus = this.value;

    fetch(`/Task/UpdateStatus/${taskId}?status=${encodeURIComponent(newStatus)}`, {
        method: 'POST'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log("Received data:", data);
        location.reload();})
    .catch(error => console.error('Error:', error));
        });
    });

    var deleteModal = document.getElementById('deleteModal');
    deleteModal.addEventListener('show.bs.modal', function(event) {
        var button = event.relatedTarget;
        var taskId = button.getAttribute('data-task-id');
        var confirmDelete = document.getElementById('confirmDelete');
        confirmDelete.href = `@Url.Action("Delete", "Tasks")/${taskId}`;
    });


    document.addEventListener("DOMContentLoaded", function () {
        var toastEl = document.getElementById("successToast");
        if (toastEl) {
            var toast = new bootstrap.Toast(toastEl, { delay: 3000 });
            toast.show();
        }
    });
</script>

@functions {
    string GetPriorityClass(string priority)
    {
        return priority switch
        {
            "high" => "danger",
            "medium" => "warning",
            "low" => "success",
            _ => "secondary"
        };
    }
}
